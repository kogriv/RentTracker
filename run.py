#!/usr/bin/env python3
"""
Interactive wrapper for Garage Payment Tracker CLI
"""

import os
import sys
from pathlib import Path
from datetime import date

def main():
    """Interactive CLI wrapper"""
    print("=== Garage Payment Tracker ===")
    print("CLI Interface for processing garage rental payments")
    print()
    
    # Language selection
    while True:
        print("Select language / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:")
        print("1. English")
        print("2. –†—É—Å—Å–∫–∏–π")
        print()
        
        lang_choice = input("Enter your choice (1-2): ").strip()
        
        if lang_choice == '1':
            language = 'en'
            break
        elif lang_choice == '2':
            language = 'ru'
            break
        else:
            print("Invalid choice. Please enter 1 or 2.\n")
    
    print()
    if language == 'ru':
        print("üìÅ –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤:")
        print("   ‚Ä¢ –í—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã: –ø–∞–ø–∫–∞ attached_assets/") 
        print("   ‚Ä¢ –û—Ç—á–µ—Ç—ã: –ø–∞–ø–∫–∞ output/")
        print("   ‚Ä¢ –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:", os.getcwd())
    else:
        print("üìÅ File Locations:")
        print("   ‚Ä¢ Input files: attached_assets/ folder") 
        print("   ‚Ä¢ Output reports: output/ folder")
        print("   ‚Ä¢ Current directory:", os.getcwd())
    print()
    
    # Check if files exist
    garage_files = list(Path("attached_assets").glob("arenda*.xlsx"))
    statement_files = list(Path("attached_assets").glob("print*.xlsx"))
    
    if garage_files:
        if language == 'ru':
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞: {garage_files[0]}")
        else:
            print(f"‚úÖ Found garage file: {garage_files[0]}")
        garage_file = garage_files[0]
    else:
        if language == 'ru':
            print("‚ùå –§–∞–π–ª—ã —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –≥–∞—Ä–∞–∂–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ attached_assets/")
        else:
            print("‚ùå No garage registry files found in attached_assets/")
        return
        
    if statement_files:
        if language == 'ru':
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –≤—ã–ø–∏—Å–∫–∏: {statement_files[0]}")
        else:
            print(f"‚úÖ Found statement file: {statement_files[0]}")
        statement_file = statement_files[0]
    else:
        if language == 'ru':
            print("‚ùå –§–∞–π–ª—ã –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –≤—ã–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ attached_assets/")
        else:
            print("‚ùå No bank statement files found in attached_assets/")
        return
    
    # Auto-detect payment period from statement
    detected_period = None
    try:
        import sys
        sys.path.insert(0, 'src')
        
        # Initialize silent logging for period detection
        from src.utils.logging_config import setup_logging
        setup_logging(
            log_level="INFO",
            log_file=Path("logs/app.log"),
            console_level="ERROR"  # Only errors in console
        )
        
        from src.parsers.file_parsers.sberbank_parser import SberbankStatementParser
        parser = SberbankStatementParser()
        detected_period = parser.extract_payment_period(statement_file)
        if detected_period:
            if language == 'ru':
                print(f"üìÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–µ—Ä–∏–æ–¥ –ø–ª–∞—Ç–µ–∂–µ–π: {detected_period.start_date} –¥–æ {detected_period.end_date}")
                print(f"üóìÔ∏è  –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –º–µ—Å—è—Ü –∞–Ω–∞–ª–∏–∑–∞: {detected_period.start_date.strftime('%B %Y')}")
            else:
                print(f"üìÖ Detected payment period: {detected_period.start_date} to {detected_period.end_date}")
                print(f"üóìÔ∏è  Recommended analysis month: {detected_period.start_date.strftime('%B %Y')}")
    except Exception:
        pass  # Silently ignore detection errors
    
    print()
    if language == 'ru':
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
        print("1. –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É")
        print("2. –ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Ä—Å–∏—é")
        
        # Add detailed descriptions with detected period info
        if detected_period:
            end_date = detected_period.end_date.strftime('%d-%m-%Y')
            start_date = detected_period.start_date.strftime('%d-%m-%Y')
            print(f"3. –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–ª–∞—Ç–µ–∂–∏ (–¥–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {end_date})")
            print(f"   –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –¥–æ {end_date} –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞")
            print(f"4. –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–ª–∞—Ç–µ–∂–∏ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –¥–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞)")
            print(f"   –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: {start_date} –¥–æ {end_date}")
            print(f"   –ü—Ä–∏–Ω—Ü–∏–ø: –±–æ–ª–µ–µ —Ä–∞–Ω–Ω–∏–µ –¥–∞—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –º–µ–Ω—å—à–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π")
        else:
            print("3. –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–ª–∞—Ç–µ–∂–∏ (–¥–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Å–µ–≥–æ–¥–Ω—è)")
            print("   –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –¥–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã")
            print("4. –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–ª–∞—Ç–µ–∂–∏ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –¥–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞)")
            print("   –í–≤–µ–¥–∏—Ç–µ –ª—é–±—É—é –¥–∞—Ç—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–µ–π –Ω–∞ —ç—Ç—É –¥–∞—Ç—É")
        
        print("5. –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –æ–±–æ–ª–æ—á–∫–∞ (–ø—Ä–∏–º–µ—Ä—ã: 'ls output/', 'python main.py --help')")
    else:
        print("Available commands:")
        print("1. Show help")
        print("2. Show version")
        
        # Add detailed descriptions with detected period info
        if detected_period:
            end_date = detected_period.end_date.strftime('%d-%m-%Y')
            start_date = detected_period.start_date.strftime('%d-%m-%Y')
            print(f"3. Process payments (default analysis date: {end_date})")
            print(f"   Analyzes all payments before {end_date} based on detected period")
            print(f"4. Process payments (custom analysis date)")
            print(f"   Recommended range: {start_date} to {end_date}")
            print(f"   Principle: earlier dates show fewer overdue payments")
        else:
            print("3. Process payments (default analysis date: today)")
            print("   Analyzes all payments before today's date")
            print("4. Process payments (custom analysis date)")
            print("   Enter any date to analyze payment status as of that date")
        
        print("5. Interactive shell (examples: 'ls output/', 'python main.py --help')")
    print()
    
    while True:
        try:
            if language == 'ru':
                choice = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤—ã–±–æ—Ä (1-5) –∏–ª–∏ 'q' –¥–ª—è –≤—ã—Ö–æ–¥–∞: ").strip()
            else:
                choice = input("Enter your choice (1-5) or 'q' to quit: ").strip()
            
            if choice.lower() == 'q':
                break
                
            if choice == '1':
                if language == 'ru':
                    os.system("python main.py --lang ru --help")
                else:
                    os.system("python main.py --help")
                
            elif choice == '2':
                print()
                print("=" * 60)
                if language == 'ru':
                    print("–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –í–ï–†–°–ò–ò:")
                else:
                    print("VERSION INFO:")
                print("=" * 60)
                if language == 'ru':
                    os.system("python main.py --lang ru version")
                else:
                    os.system("python main.py version")
                print("=" * 60)
                
            elif choice == '3':
                # Use detected period's end date as analysis date, or today if no period detected
                if detected_period:
                    analysis_date_str = detected_period.end_date.strftime('%Y-%m-%d')
                    output_file = f"output/payment_report_{detected_period.end_date.strftime('%Y%m%d')}.xlsx"
                    if language == 'ru':
                        cmd = f'python main.py --lang ru process-payments --garage-file "{garage_file}" --statement-file "{statement_file}" --analysis-date "{analysis_date_str}" --output "{output_file}"'
                    else:
                        cmd = f'python main.py process-payments --garage-file "{garage_file}" --statement-file "{statement_file}" --analysis-date "{analysis_date_str}" --output "{output_file}"'
                else:
                    output_file = f"output/payment_report_{date.today().strftime('%Y%m%d')}.xlsx"
                    if language == 'ru':
                        cmd = f'python main.py --lang ru process-payments --garage-file "{garage_file}" --statement-file "{statement_file}" --output "{output_file}"'
                    else:
                        cmd = f'python main.py process-payments --garage-file "{garage_file}" --statement-file "{statement_file}" --output "{output_file}"'
                if language == 'ru':
                    print(f"–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: {cmd}")
                else:
                    print(f"Running: {cmd}")
                
                # Capture output and separate logs from results
                import subprocess
                result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
                
                # Show only critical logs, then results clearly separated
                lines = result.stdout.split('\n')
                
                # Find where actual results start (after processing completion message)
                result_start = -1
                for i, line in enumerate(lines):
                    if "Processing completed successfully" in line or "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ" in line:
                        result_start = i
                        break
                
                if result_start != -1:
                    print()
                    print("=" * 60)
                    if language == 'ru':
                        print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ë–†–ê–ë–û–¢–ö–ò:")
                    else:
                        print("PROCESSING RESULTS:")
                    print("=" * 60)
                    for line in lines[result_start:]:
                        if line.strip():
                            print(line)
                    print("=" * 60)
                else:
                    # Fallback if pattern not found
                    print()
                    print("=" * 60)
                    if language == 'ru':
                        print("–í–´–•–û–î–ù–´–ï –î–ê–ù–ù–´–ï –û–ë–†–ê–ë–û–¢–ö–ò:")
                    else:
                        print("PROCESSING OUTPUT:")
                    print("=" * 60)
                    print(result.stdout)
                    print("=" * 60)
                
                if result.stderr:
                    if language == 'ru':
                        print("–û—à–∏–±–∫–∏:", result.stderr)
                    else:
                        print("Errors:", result.stderr)
                
            elif choice == '4':
                if detected_period:
                    if language == 'ru':
                        print(f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç: {detected_period.start_date} –¥–æ {detected_period.end_date}")
                        print("–°–æ–≤–µ—Ç: –±–æ–ª–µ–µ —Ä–∞–Ω–Ω–∏–µ –¥–∞—Ç—ã –ø–æ–∫–∞–∂—É—Ç –º–µ–Ω—å—à–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π")
                    else:
                        print(f"Recommended date range: {detected_period.start_date} to {detected_period.end_date}")
                        print("Tip: Earlier dates will show fewer overdue payments")
                
                if language == 'ru':
                    analysis_date = input("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∞–Ω–∞–ª–∏–∑–∞ (–ì–ì–ì–ì-–ú–ú-–î–î): ").strip()
                else:
                    analysis_date = input("Enter analysis date (YYYY-MM-DD): ").strip()
                
                if not analysis_date:
                    if language == 'ru':
                        print("–î–∞—Ç–∞ –Ω–µ –≤–≤–µ–¥–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.")
                    else:
                        print("No date entered, returning to menu.")
                    continue
                
                output_file = f"output/payment_report_{analysis_date.replace('-', '')}.xlsx"
                if language == 'ru':
                    cmd = f'python main.py --lang ru process-payments --garage-file "{garage_file}" --statement-file "{statement_file}" --analysis-date "{analysis_date}" --output "{output_file}"'
                    print(f"–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: {cmd}")
                else:
                    cmd = f'python main.py process-payments --garage-file "{garage_file}" --statement-file "{statement_file}" --analysis-date "{analysis_date}" --output "{output_file}"'
                    print(f"Running: {cmd}")
                
                # Capture output and separate logs from results
                import subprocess
                result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
                
                lines = result.stdout.split('\n')
                result_start = -1
                for i, line in enumerate(lines):
                    if "Processing completed successfully" in line or "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ" in line:
                        result_start = i
                        break
                
                if result_start != -1:
                    print()
                    print("=" * 60)
                    if language == 'ru':
                        print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ë–†–ê–ë–û–¢–ö–ò:")
                    else:
                        print("PROCESSING RESULTS:")
                    print("=" * 60)
                    for line in lines[result_start:]:
                        if line.strip():
                            print(line)
                    print("=" * 60)
                else:
                    print()
                    print("=" * 60)
                    if language == 'ru':
                        print("–í–´–•–û–î–ù–´–ï –î–ê–ù–ù–´–ï –û–ë–†–ê–ë–û–¢–ö–ò:")
                    else:
                        print("PROCESSING OUTPUT:")
                    print("=" * 60)
                    print(result.stdout)
                    print("=" * 60)
                
                if result.stderr:
                    if language == 'ru':
                        print("–û—à–∏–±–∫–∏:", result.stderr)
                    else:
                        print("Errors:", result.stderr)
                
            elif choice == '5':
                if language == 'ru':
                    print("–í—Ö–æ–¥ –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –æ–±–æ–ª–æ—á–∫—É...")
                    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã:")
                    print(f"  –§–∞–π–ª —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞: {garage_file}")
                    print(f"  –§–∞–π–ª –≤—ã–ø–∏—Å–∫–∏: {statement_file}")
                    print("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'python main.py process-payments --help')")
                    exit_msg = "–í–≤–µ–¥–∏—Ç–µ 'exit', 'quit' –∏–ª–∏ 'q' –¥–ª—è –≤—ã—Ö–æ–¥–∞"
                    prompt = "CLI> "
                else:
                    print("Entering interactive shell...")
                    print("Available files:")
                    print(f"  Garage file: {garage_file}")
                    print(f"  Statement file: {statement_file}")
                    print("Type your command (e.g., 'python main.py process-payments --help')")
                    exit_msg = "Type 'exit', 'quit' or 'q' to return to menu"
                    prompt = "CLI> "
                
                print(exit_msg)
                while True:
                    user_cmd = input(prompt).strip()
                    if user_cmd.lower() in ['exit', 'quit', 'q']:
                        break
                    if user_cmd:
                        os.system(user_cmd)
                        
            else:
                if language == 'ru':
                    print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                else:
                    print("Invalid choice. Please try again.")
                
            print()
            
        except KeyboardInterrupt:
            if language == 'ru':
                print("\n–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            else:
                print("\nGoodbye!")
            break
        except Exception as e:
            if language == 'ru':
                print(f"–û—à–∏–±–∫–∞: {e}")
            else:
                print(f"Error: {e}")

if __name__ == "__main__":
    main()